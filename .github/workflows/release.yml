name: release

on:
  schedule:
    - cron: '5 5 * * *'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
env:
  CARGO_TERM_COLOR: always

jobs:

  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.release_version }}
    steps:
      - if: github.event_name == 'workflow_dispatch'
        run: echo "release_version=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'release_version=nightly' >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: echo "release_version=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          # echo "::set-output name=release_version::${{ env.release_version }}"
      - id: release
        uses: actions/github-script@v6
        with:
          script: |
            let release_label
            if ('nightly' === '${{ env.release_version }}') {
              release_label = 'nightly';
            } else {
              release_label = 'stable';
            }
            try {
              const { data: { id:release_id } } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: release_label,
              });
              if ( release_id ) {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id,
                });
              }
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${release_label}`,
              });
            } catch (e) {
              console.error(e)
            }
            let upload_url = [];
            const { data: { upload_url: tag_update_url } } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ env.release_version }}',
              name: 'Release ${{ env.release_version }}',
            });
            upload_url.push(tag_update_url);
            if ('nightly' !== release_label) {
            const { data: { upload_url: label_update_url } } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: release_label,
                name: `Release ${ release_label }`,
              });
              upload_url.push(label_update_url);
            }
            core.setOutput('upload_url', JSON.stringify(upload_url));

  update-release:
    name: update-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-latest
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        # - build: win-msvc
        #   os: windows-2019
        #   rust: stable
        #   target: x86_64-pc-windows-msvc
        # - build: win-gnu
        #   os: windows-2019
        #   rust: stable-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: stable
        #   target: i686-pc-windows-msvc
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: Swatinem/rust-cache@v1
    - uses: actions-rs/toolchain@v1
      with:
        override: true
        profile: minimal
        toolchain: ${{ matrix.rust }}
    - name: build release binary
      uses: actions-rs/cargo@v1.0.1
      with:
        command: build
        args: --release --target=${{ matrix.target }}
        use-cross: true
    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/stow"
    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/stow
    - name: Build archive
      shell: bash
      run: |
        staging="stow-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
        mkdir -p "$staging"
        cp {README.md,LICENSE} "$staging/"
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/stow.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/stow" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ matrix.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream




  check_json:
    runs-on: ubuntu-latest
    needs: [ 'create-release' ]
    steps:
      - name: echo JSON
        run: echo ${{ fromJSON(needs.create-release.outputs.upload_url) }}
